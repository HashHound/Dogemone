name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            artifact-name: 'ubuntu-20.04'
          - os: ubuntu-22.04
            artifact-name: 'ubuntu-22.04'
          - os: macos-latest
            artifact-name: 'macos'
          - os: windows-latest
            artifact-name: 'windows'

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python (Linux/MacOS)
      if: matrix.os != 'windows-latest'
      uses: actions/setup-python@v2

    - name: Set up Python (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies (Ubuntu/MacOS)
      if: matrix.os != 'windows-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libboost-all-dev libssl-dev

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          base-devel
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-boost
          mingw-w64-x86_64-openssl

    - name: Build (Linux/MacOS)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
        make

    - name: Build (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir build && cd build
        cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release
        cmake --build .

    - name: Archive Release Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.artifact-name }}.zip
        path: build/*.zip

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download Artifacts
        uses: actions/download-artifact@v2

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ matrix.artifact-name }}.zip
          asset_name: ${{ matrix.artifact-name }}.zip
          asset_content_type: application/zip
