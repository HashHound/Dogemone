name: Build and Release on Tag

on:
  push:
    tags:
      - 'v*'

jobs:
  build-ubuntu-2004:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-all-dev libssl-dev zip

      - name: Build
        run: |
          mkdir -p build/release/src
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make

      - name: Archive Release Artifacts
        run: |
          cd build/release/src
          zip -r ubuntu-20.04-build.zip .
        working-directory: build/release/src

      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ubuntu-20.04-build.zip
          path: build/release/src/ubuntu-20.04-build.zip

  build-ubuntu-2204:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-all-dev libssl-dev zip

      - name: Build
        run: |
          mkdir -p build/release/src
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make

      - name: Archive Release Artifacts
        run: |
          cd build/release/src
          zip -r ubuntu-22.04-build.zip .
        working-directory: build/release/src

      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ubuntu-22.04-build.zip
          path: build/release/src/ubuntu-22.04-build.zip

  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install MSYS2
        uses: msys2/setup-msys2@v2
        with:
          update: true

      - name: Install dependencies
        shell: msys2 {0}
        run: |
          pacman -Sy --noconfirm
          pacman -S --noconfirm base-devel mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake mingw-w64-x86_64-boost mingw-w64-x86_64-openssl

      - name: Add MSYS2 to PATH
        run: echo "C:\\msys64\\mingw64\\bin" >> $GITHUB_PATH

      - name: Build
        shell: msys2 {0}
        run: |
          mkdir -p build/release/src
          cd build
          cmake -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release ..
          cmake --build .

      - name: Archive Release Artifacts
        run: |
          cd build/release/src
          zip -r windows-build.zip .
        working-directory: build/release/src

      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: windows-build.zip
          path: build/release/src/windows-build.zip

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          brew install cmake boost openssl

      - name: Build
        run: |
          mkdir -p build/release/src
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make

      - name: Archive Release Artifacts
        run: |
          cd build/release/src
          zip -r macos-build.zip .
        working-directory: build/release/src

      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: macos-build.zip
          path: build/release/src/macos-build.zip

  create-release:
    runs-on: ubuntu-latest
    needs: [build-ubuntu-2004, build-ubuntu-2204, build-windows, build-macos]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download Ubuntu 20.04 Artifacts
        uses: actions/download-artifact@v2
        with:
          name: ubuntu-20.04-build.zip

      - name: Download Ubuntu 22.04 Artifacts
        uses: actions/download-artifact@v2
        with:
          name: ubuntu-22.04-build.zip

      - name: Download Windows Artifacts
        uses: actions/download-artifact@v2
        with:
          name: windows-build.zip

      - name: Download macOS Artifacts
        uses: actions/download-artifact@v2
        with:
          name: macos-build.zip

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Ubuntu 20.04 Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ubuntu-20.04-build.zip
          asset_name: ubuntu-20.04-build.zip
          asset_content_type: application/zip

      - name: Upload Ubuntu 22.04 Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ubuntu-22.04-build.zip
          asset_name: ubuntu-22.04-build.zip
          asset_content_type: application/zip

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: windows-build.zip
          asset_name: windows-build.zip
          asset_content_type: application/zip

      - name: Upload macOS Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: macos-build.zip
          asset_name: macos-build.zip
          asset_content_type: application/zip
